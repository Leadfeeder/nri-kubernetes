package client

import (
	"net/http"
	"time"

	"github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
	"k8s.io/client-go/rest"
)

// MockedKubernetes is an autogenerated mock type for the Kubernetes type
type MockedKubernetes struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *MockedKubernetes) Config() *rest.Config {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// FindNode provides a mock function with given fields: name
func (_m *MockedKubernetes) FindNode(name string) (*v1.Node, error) {
	ret := _m.Called(name)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(string) *v1.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPodsByLabel provides a mock function with given fields: name, value
func (_m *MockedKubernetes) FindPodsByLabel(name string, value string) (*v1.PodList, error) {
	ret := _m.Called(name, value)

	var r0 *v1.PodList
	if rf, ok := ret.Get(0).(func(string, string) *v1.PodList); ok {
		r0 = rf(name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceByLabel provides a mock function with given fields: name, value
func (_m *MockedKubernetes) FindServiceByLabel(name string, value string) (*v1.ServiceList, error) {
	ret := _m.Called(name, value)

	var r0 *v1.ServiceList
	if rf, ok := ret.Get(0).(func(string, string) *v1.ServiceList); ok {
		r0 = rf(name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ServiceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecureHTTPClient provides a mock function with given fields: _a0
func (_m *MockedKubernetes) SecureHTTPClient(_a0 time.Duration) (*http.Client, error) {
	ret := _m.Called(_a0)

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(time.Duration) *http.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
